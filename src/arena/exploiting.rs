use crate::interfaces::{
    BoardSizeT, GameState, Placement, Player, PlayerID, PointPlacement, Result,
    TicTacToeArena, TicTacToeReferee, WinLengthT,
};
use crate::utils::{into_iter_2d_array, joint_iter_2d_arrays};

pub struct ExploitingArena<'arena, const N: BoardSizeT, const K: WinLengthT> {
    active_player: PlayerID,
    board: GameState,
    players: [&'arena mut (dyn Player<N, K>); 2],
    referee: &'arena mut (dyn TicTacToeReferee<K>),
}

impl<'arena, const N: BoardSizeT, const K: WinLengthT> ExploitingArena<'arena, N, K> {
    pub fn new(
        starting_player: PlayerID,
        board: GameState,
        players: [&'arena mut dyn Player<N, K>; 2],
        referee: &'arena mut dyn TicTacToeReferee<K>,
    ) -> Self {
        let matching_players: Vec<PlayerID> = players
            .iter()
            .enumerate()
            .filter_map(|(n, cur)| {
                if cur.get_id() == starting_player {
                    Some(n)
                } else {
                    None
                }
            })
            .collect();

        match matching_players[..] {
            [] => panic!("No matching player found for ID {starting_player}"),
            [n] => Self {
                board,
                players,
                active_player: n,
                referee,
            },
            _ => panic!("Multiple matching player found for ID {starting_player}"),
        }
    }

    fn get_first_maximum_point_placement(
        board: &GameState,
        placement: &Placement<N>,
    ) -> Option<PointPlacement> {
        let mut pp: Option<PointPlacement> = None;
        let mut weight: f32 = 0.0;

        // Get point placement candidates with weights
        for (row, column, cell, cur_weight) in joint_iter_2d_arrays(
            board.iter_2d().map(|(pp, elem)| (pp.row, pp.column, elem)),
            into_iter_2d_array(placement),
        ) {
            if cell.is_taken() || cur_weight == 0.0 {
                continue;
            }
            if cur_weight > weight {
                pp = Some(PointPlacement { row, column });
                weight = cur_weight;
            }
        }
        pp
    }
}

impl<const N: BoardSizeT, const K: WinLengthT> TicTacToeArena<N, K>
    for ExploitingArena<'_, N, K>
{
    fn do_next_move(&mut self) -> (Result, PlayerID, Option<PointPlacement>) {
        let cur_player = &mut self.players[self.active_player % 2];
        self.active_player += 1;
        let placements = cur_player.do_move(&self.board);
        let maybe_pp = ExploitingArena::<N, K>::get_first_maximum_point_placement(
            &self.board,
            &placements,
        );

        match maybe_pp {
            Some(pp) => {
                let result =
                    self.referee
                        .receive_move(&mut self.board, pp, cur_player.get_id());
                (result, cur_player.get_id(), Some(pp))
            }
            None => (Result::Defeat, cur_player.get_id(), None),
        }
    }

    fn get_board(&self) -> GameState {
        self.board.clone()
    }
}
