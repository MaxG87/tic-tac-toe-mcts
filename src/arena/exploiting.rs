use crate::interfaces::*;
use crate::utils::*;

pub struct ExploitingArena<'arena, const N: usize, const K: usize> {
    active_player: usize,
    board: Board<N>,
    players: [&'arena mut (dyn Player<N, K>); 2],
    referee: &'arena mut (dyn TicTacToeReferee<N, K>),
}

impl<'arena, const N: usize, const K: usize> ExploitingArena<'arena, N, K> {
    pub fn new(
        starting_player: PlayerID,
        board: Board<N>,
        players: [&'arena mut dyn Player<N, K>; 2],
        referee: &'arena mut dyn TicTacToeReferee<N, K>,
    ) -> Self {
        let matching_players: Vec<PlayerID> = players
            .iter()
            .enumerate()
            .filter_map(|(n, cur)| {
                if cur.get_id() == starting_player {
                    Some(n)
                } else {
                    None
                }
            })
            .collect();

        match matching_players[..] {
            [] => panic!("No matching player found for ID {starting_player}"),
            [n] => Self {
                board,
                players,
                active_player: n,
                referee,
            },
            _ => panic!("Multiple matching player found for ID {starting_player}"),
        }
    }

    fn get_first_maximum_point_placement(
        board: &Board<N>,
        placement: &Placement<N>,
    ) -> Option<PointPlacement> {
        let mut pp: Option<PointPlacement> = None;
        let mut weight: f32 = 0.0;

        // Get point placement candidates with weights
        for (row, column, maybe_id, cur_weight) in joint_iter_2d_arrays(
            into_iter_2d_array(&board.board),
            into_iter_2d_array(placement),
        ) {
            if maybe_id.is_some() || cur_weight == 0.0 {
                continue;
            } else if cur_weight > weight {
                pp = Some(PointPlacement { row, column });
                weight = cur_weight;
            }
        }
        pp
    }
}

impl<'arena, const N: usize, const K: usize> TicTacToeArena<N, K>
    for ExploitingArena<'arena, N, K>
{
    fn do_next_move(&mut self) -> (Result, PlayerID, Option<PointPlacement>) {
        let cur_player = &mut self.players[self.active_player % 2];
        self.active_player += 1;
        let placements = cur_player.do_move(&self.board);
        let maybe_pp =
            ExploitingArena::<N, K>::get_first_maximum_point_placement(&self.board, &placements);

        match maybe_pp {
            Some(pp) => {
                let result = self
                    .referee
                    .receive_move(&mut self.board, pp, cur_player.get_id());
                (result, cur_player.get_id(), Some(pp))
            }
            None => (Result::Defeat, cur_player.get_id(), None),
        }
    }

    fn get_board(&self) -> Board<N> {
        self.board.clone()
    }
}
